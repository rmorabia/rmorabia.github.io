<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>radhika&#39;s dev thoughts</title>
	<subtitle>...and the rest is rust and stardust.</subtitle>
	<link href="https://rmorabia.com/feed.xml" rel="self"/>
	<link href="https://rmorabia.com/"/>
	<updated>2024-09-01T00:00:00Z</updated>
	<id>https://rmorabia.com/</id>
	<author>
		<name>Radhika Morabia</name>
		<email>hi@rmorabia.com</email>
	</author>
	
	<entry>
		<title>The Limits of Front-End Testing</title>
		<link href="https://rmorabia.com/blog/integration-testing/"/>
		<updated>2024-09-01T00:00:00Z</updated>
		<id>https://rmorabia.com/blog/integration-testing/</id>
		<content type="html">&lt;p&gt;I recently submitted a bugfix in a codebase I haven&#39;t touched in over 6 months. I added unit tests, manually QAed, and ...broke production pretty badly.&lt;/p&gt;
&lt;p&gt;I spent the next couple of days a bit shaken -- in trying to fix an edge case, I ended up breaking a fundamental flow in the app.&lt;/p&gt;
&lt;p&gt;How did this happen? We have all sorts of tests: unit tests on most functions and actions (using Jest), component-level tests on this page (using React Testing Library), and end-to-end tests that check if the flow is working (using Cypress). I felt safe in writing code I wasn&#39;t 100% familiar with. I wouldn&#39;t have been surprised if another edge case showed up, but no part of me was expecting to break the entire flow, given this test coverage.&lt;/p&gt;
&lt;p&gt;What was the leak?&lt;/p&gt;
&lt;p&gt;First, let me explain the bug, then talk about our tests. I wrote a modification to a function which saves user data to the server, which validates that data and sends it back to us to update the UI with. I made a bad assumption which is that I wanted the data in a specific part to reset to default if the user did a specific action. My code was correct given that assumption, but this would end up locking the user in a loop where it&#39;s impossible to ever actually update that data that I keep resetting to default. I, for some strange reason, thought that it would fail the back-end validation if it wasn&#39;t completely reset. This is not how it ended up working, of course, because the reset data was completely valid to the back-end, and would get saved as the user&#39;s changes every time.&lt;/p&gt;
&lt;p&gt;The fix to this was to limit the values that are reset to only be the values I actually needed to reset. So, instead of &amp;quot;User did X, data that relies on X will reset to default,&amp;quot; I&#39;m changing it to &amp;quot;User did X, data that relies on X is unchanged, but I&#39;m changing X to Y. They&#39;ll never know.&amp;quot; This is a bit convoluted, but my summary here is: I made a bad assumption about how data would be validated. This ended up resetting the the user&#39;s data every time they tried to save.&lt;/p&gt;
&lt;p&gt;So, how did this fail the tests, considering how easy this was to replicate in QA, and the app has a log of user actions to check if what the user actually did is what the app ended up understanding?&lt;/p&gt;
&lt;p&gt;Our component-level tests were testing whether or not the correct components rendered and the UI updated as expected. The UI would update as expected, it was the saving to the server that failed.&lt;/p&gt;
&lt;p&gt;Okay, then if the saving failed, how did it pass those unit tests? Our unit tests were testing the server call of the specific function I was editing. My work passed all of these tests because the correct server call was being made and I wrote the first assumption of what the request body to that call should be, and of course, my code passed &lt;em&gt;my&lt;/em&gt; tests. It was the UI after that wouldn&#39;t update!&lt;/p&gt;
&lt;p&gt;Okay, then if the UI didn&#39;t update correctly, how did it pass the end-to-end tests? The end-to-end tests test the entire flow, changing basically every option possible in one large test per flow, which is not how users use the app -- which would be changing one thing and that appropriately showing up in the log.&lt;/p&gt;
&lt;p&gt;After the incident occurred, I thought: this must be such an easy test to add. How don&#39;t we have tests like that already? Every action the user takes, we have a log of what the user has done. So, it&#39;s a simple test, user does X, does log say that the user did X? Regardless of the request bodies and the state changes, does the app function as expected?&lt;/p&gt;
&lt;p&gt;It turns out, we never test that kind of interaction in the app. I actually have a few times in another project I did after this bug, but those tests took multiple seconds using RTL when the average time for RTL is a couple of milliseconds. I think it&#39;s against the nature of most apps to do this kind of testing: it would require adding a couple of dozen unit tests at the container level of a sub-application and drilling into sub-components.&lt;/p&gt;
&lt;p&gt;I&#39;m the only one writing tests this way, which makes me think I&#39;m writing these tests wrong. After this incident, I opened the RTL test for the container component of this page that was failing, expecting to write another one of these drilling tests, only to find all the sub components mocked and the functions tested in isolation. I think that&#39;s the correct way... and it wouldn&#39;t have caught my issue even if I did add that test, since just like the unit tests I wrote, I would&#39;ve updated the request body to reset all my data just like I expected.&lt;/p&gt;
&lt;p&gt;I think the answer here is pretty simple: there should have already been integration tests. The ideal test for this scenario, and a lot of scenarios in this app that are constantly sending and receiving data to a back-end (more than any other app I&#39;ve ever written) is to have robust integration tests. It would&#39;ve set my alarm signals off if other tests failed, not the new ones I created. How do you do integration tests with React, though, without 30 minute test times in Cypress?&lt;/p&gt;
&lt;p&gt;The test that would&#39;ve fixed this is in my mind: &amp;quot;When I update Section H and hit Save, the request body is as follows. After a successful response, the user log (which is also gotten from the server) says X occurred as follows, and only X occurred as follows.&amp;quot; The important part here is these would have to be pre-existing tests, dozens of integration tests should have broken when I added my code, sending off alarm signals that this is having unintended consequences.&lt;/p&gt;
&lt;p&gt;However, the tooling, infrastructure, testing culture, and other overhead to make this happen is over my head. Even if I wanted to take this on as a project on the side now, I&#39;m not even sure how to accomplish that given the render-focused tests that we write with RTL. I&#39;m not the best at testing yet. I have had a copy of TDD by Kent Beck on my desk before this incident, and I will probably take the time to actually crack it open now after this incident.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Developer Blogs &amp; Newsletters I Read</title>
		<link href="https://rmorabia.com/blog/dev-blogs/"/>
		<updated>2024-08-25T00:00:00Z</updated>
		<id>https://rmorabia.com/blog/dev-blogs/</id>
		<content type="html">&lt;p&gt;This is a list of the current developer blogs, email newsletters, and YouTube channels I am subscribed to, along with some notes on whether or not they will be useful for you to follow.&lt;/p&gt;
&lt;h2 id=&quot;the-pragmatic-engineer&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://www.pragmaticengineer.com/&quot;&gt;The Pragmatic Engineer&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://rmorabia.com/blog/dev-blogs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Gergely is the best at telling software engineers everything they need to know about the state of the industry without the hype. I&#39;ve been reading his work since he was just blogging, and have now been reading his newsletter for a couple of years. The emphasis really is on a pragmatic point of view: real, relevant news, analyses, and insider interviews. This is particularly mostly relevant if you work in the &amp;quot;tech&amp;quot; industry, not as an engineer in another industry.&lt;/p&gt;
&lt;h2 id=&quot;bytes-dev&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://bytes.dev/&quot;&gt;Bytes.dev&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://rmorabia.com/blog/dev-blogs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is JavaScript-specific news that doesn&#39;t make me want to tear my hair out. A lot of the main focus is on trends, which is pretty irrelevant unless you&#39;re working for a startup and are choosing new technologies every day. However, they have a section that&#39;s called &amp;quot;Spot the Bug&amp;quot; which is a good reminder of obscure language rules, and their curation of external blog posts worth reading is a good enough mix of trends and non-trends to justify skimming twice a week.&lt;/p&gt;
&lt;h2 id=&quot;tech-talks-weekly&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://techtalksweekly.substack.com/&quot;&gt;Tech Talks Weekly&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://rmorabia.com/blog/dev-blogs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a recent and powerful discovery for me. I fundamentally believe that if you&#39;re hot a hobbyist professional and you want to keep learning, your options start to get slim very fast. You can read a couple of books a year, but I generally focus on more fundamentals and timeless books there. To keep up with a diverse set of ideas and technologies without getting bogged down in blog spam (popularity isn&#39;t a good curation metric!), tech talks are my new go-to. I try and watch anything that sounds interesting to me and shut it off in 10 minutes if it&#39;s not useful. This means, more often than not, watching talks outside of the world of JavaScript and front-end development.&lt;/p&gt;
&lt;h2 id=&quot;software-clown-by-itamar-turner-trauring&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://codewithoutrules.com/&quot;&gt;Software Clown by Itamar Turner-Trauring&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://rmorabia.com/blog/dev-blogs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The shortest, sweetest newsletter I get each week. Software Clown is an extraordinary series even though I&#39;ve never touched Python in my life, and Itamar&#39;s books and blog posts are concise and actionable. I highly recommend this one to basically every professional software engineer. There&#39;s no encouragement to become a hobbyist who&#39;s into trends here.&lt;/p&gt;
&lt;h2 id=&quot;will-larson&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://lethain.com/&quot;&gt;Will Larson&lt;/a&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://rmorabia.com/blog/dev-blogs/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Will is mostly a skip for me these days as his focus has shifted almost entirely towards writing for Staff+ Engineers and tech executives. However, I will still read just about anything that isn&#39;t specifically about those topics from him. He has written some of the most all-time engineering career posts ever, so digging through his archives is more recommended than subscribing at this point.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>UX When Using Dev Tooling for Non-Developers</title>
		<link href="https://rmorabia.com/blog/ux-subs/"/>
		<updated>2024-07-22T00:00:00Z</updated>
		<id>https://rmorabia.com/blog/ux-subs/</id>
		<content type="html">&lt;p&gt;All of my friends know I only really did one impressive thing last year: I built an AI subtitle generator that will take any video or audio file (usually a movie), and output a subtitle file you can drop in with the movie. That&#39;s existed for years, but the big change here is that a level of progress had been pushed: Subtitles were finally vaguely sorta kinda ...if you squint... usable for movies in other languages.&lt;/p&gt;
&lt;p&gt;It took me 2 or 3 hours, and the entire code can be pasted below:&lt;/p&gt;
&lt;pre class=&quot;language-py&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-py&quot;&gt; &lt;span class=&quot;token comment&quot;&gt;# @title Choose your language and press play to the side&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; google&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;colab &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; drive
drive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mount&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/content/drive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; google&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;colab &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; files
uploaded &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;upload&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
filename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uploaded&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

!pip install git&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;openai&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;whisper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;git

!sudo apt update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; sudo apt install ffmpeg

language &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Telugu&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# @param [&quot;Hindi&quot;, &quot;Tamil&quot;, &quot;Telugu&quot;, &quot;Malayalam&quot;, &quot;Punjabi&quot;, &quot;Kannada&quot;, &quot;Gujarati&quot;, &quot;Bengali&quot;, &quot;French&quot;, &quot;Japanese&quot;, &quot;Korean&quot;, &quot;Cantonese&quot;, &quot;Spanish&quot;, &quot;Portuguese&quot;]&lt;/span&gt;

!ffmpeg &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;i $filename subs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mp3
!whisper subs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mp3 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;task translate &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;model large &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;language $language &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;output_dir &lt;span class=&quot;token string&quot;&gt;&quot;/content/drive/My Drive/Subtitles&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s right. It&#39;s just 15 lines of Python that wraps around OpenAI&#39;s Whisper and uses pre-existing tools using Google Colab&#39;s Jupyter notebook system.&lt;/p&gt;
&lt;p&gt;To me, it was an architectural wonder that I could clumsily use a fairly accessible system to do huge amounts of computing for personal gain. I thought everyone would be on board with being able to use this magical tool, because all they really needed was a Google account and some patience.&lt;/p&gt;
&lt;p&gt;As always happens in engineers doing UX, I was very, very wrong.&lt;/p&gt;
&lt;p&gt;Let&#39;s go back to v1 of this app:&lt;/p&gt;
&lt;pre class=&quot;language-py&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Step One: Install Requirements&lt;/span&gt;
!pip install git&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;openai&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;whisper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;git

!sudo apt update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; sudo apt install ffmpeg

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; google&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;colab &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; drive
drive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mount&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/content/drive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Step Two: Upload Audio File&lt;/span&gt;

If you need to get an &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mp3 &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; a video &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; you can use VLC Media Player to do so using this tutorial &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;here&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;researchguides&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;edu&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;php?g&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1286426&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

Once you have your &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt; the &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; folder on the left&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;hand corner of the page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Drag the &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mp3 you would like to transcribe into the &lt;span class=&quot;token string&quot;&gt;&quot;Files&quot;&lt;/span&gt; section&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

Give it a minute&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; there&lt;span class=&quot;token string&quot;&gt;&#39;s a blue circle that indicates it&#39;&lt;/span&gt;s uploading&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Since it&lt;span class=&quot;token string&quot;&gt;&#39;s as long as a movie, it&#39;&lt;/span&gt;ll probably take a few minutes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Stay on this page &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; wait until it&#39;s done&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

This will upload the audio to this page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Here&lt;span class=&quot;token string&quot;&gt;&#39;s what it looks like once you&#39;&lt;/span&gt;ve uploaded a &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Step Three: Translate&lt;/span&gt;

To translate an &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mp3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; simply copy &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; paste the title of your &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mp3 &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt; into the command line below &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; run the cell&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Remember to include the &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mp3 at the end&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

You can change the language &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; needed &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the command line&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; English &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; the default output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

THIS WILL TAKE A WHILE&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Once it &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; done&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; click the Folder icon again&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Wala! There &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; your SRT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Enjoy!!!

!whisper &lt;span class=&quot;token string&quot;&gt;&quot;jabardasth.mp3&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;task translate &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;model large &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;language Telugu &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;output_dir &lt;span class=&quot;token string&quot;&gt;&quot;/content/drive/My Drive/Subtitles&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As users tried the app, they got stuck at a myriad number of points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They wouldn&#39;t be clear on how to connect to a GPU using Colab.&lt;/li&gt;
&lt;li&gt;They&#39;d upload files with invalid characters like &lt;code&gt;movie name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;They were unclear on how to upload files to Google Colab.&lt;/li&gt;
&lt;li&gt;They expected to be able to walk away after Step 1 or 2, because sometimes their uploads took so long, but actually, they had to stay.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since this got vaguely popular, I actually got emails asking for help on how to use it, and it was fairly easily for me to diagnose every time. &lt;strong&gt;What was obvious to me was not obvious to the user.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every time I got an email or message with an issue, I&#39;d update either the documentation or the code to accommodate their lack of understanding, which ended up in the following changes from the original:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Everything is one step now and goes in order of most need for user interaction to least. So, it begins by validating their Google Drive to save the subtitle file.&lt;/li&gt;
&lt;li&gt;The user uploads a file using an HTML input they are familiar with from other webpages.&lt;/li&gt;
&lt;li&gt;The user chooses a language from an HTML dropdown that they are familiar with from other webpages.&lt;/li&gt;
&lt;li&gt;I change the name of their movie file myself into something that Whisper can handle, and explicitly document the limits of what ffmpeg can handle.&lt;/li&gt;
&lt;li&gt;The app can work with both video and audio files.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Basically, I gave the user a lot less choice (which I, as an engineer like) and put them on a much more linear path.&lt;/p&gt;
&lt;p&gt;I eventually was able to get maybe 50% of my expected userbase to deal with the headaches of using a fundamentally technical tool used for college students&#39; coding projects to do our hobbyist movie subtitling. To those 50%, it was magic. To the other 50%, unfortunately Colab still has random failures, the GPUs are often taken, and the subtitling still isn&#39;t that impressive.&lt;/p&gt;
&lt;p&gt;OpenAI 4o introduced the idea that Indian languages will be 50% faster to translate and have a 20% increase in accuracy. In my limited tests with it, it is a worthwhile enough improvement that I would really like to build v2.0 based on OpenAI 4o&#39;s audio model. I highly doubt that OpenAI will be releasing 4o as an open source project that I can simply plug into Google Colab, though.&lt;/p&gt;
&lt;p&gt;This means I will likely be building an actual web app for users to use and interface with the API. I&#39;ll have full control over the flow, and I&#39;m really hoping that I can get the 50% user base up to 90% once I can design the app myself.&lt;/p&gt;
&lt;p&gt;Honestly, the most difficult part for me is to figure out how to get bots to not use the API without my permission, since I&#39;d be paying for OpenAI&#39;s servers out of pocket. I have no idea how to password-protect a site, but I will find out! OpenAI, please, there&#39;s so many movies I need to see.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Make Visual Studio Code 150% Faster in Large Projects</title>
		<link href="https://rmorabia.com/blog/vs/"/>
		<updated>2020-07-15T00:00:00Z</updated>
		<id>https://rmorabia.com/blog/vs/</id>
		<content type="html">&lt;p&gt;I recently switched projects over to our large monorepo (the zip from GitHub is around 150mb, without &lt;code&gt;node_modules&lt;/code&gt;). I found that not only was Webpack causing my fans to run on overdrive, Visual Studio Code would get so laggy that typing caused seconds of latency.&lt;/p&gt;
&lt;p&gt;I tried switching back to a simpler code editor, but I&#39;m extremely reliant on Code&#39;s built-in search features in such a big project like this.&lt;/p&gt;
&lt;p&gt;So, I had to take some time to get to the bottom of this.&lt;/p&gt;
&lt;p&gt;Firstly, I checked Activity Monitor. I saw that something called &lt;code&gt;Code Helper (Renderer)&lt;/code&gt; was taking 150% of my CPU.&lt;/p&gt;
&lt;p&gt;My initial assumption was to stop using Code&#39;s built-in terminal and switch over to iTerm. That didn&#39;t fix it.&lt;/p&gt;
&lt;p&gt;I looked at &lt;a href=&quot;https://github.com/microsoft/vscode/issues/87509&quot;&gt;a lot of GitHub Issues about this issue&lt;/a&gt; and saw repeated comments from the Code team that &lt;code&gt;Code Helper (Renderer)&lt;/code&gt; is a process that comes from an extension. Disable all extensions and it will work.&lt;/p&gt;
&lt;p&gt;So... I did. It did not work. I didn&#39;t even have any themes installed.&lt;/p&gt;
&lt;p&gt;Finally, I came across &lt;a href=&quot;https://stackoverflow.com/questions/54798028/how-do-i-figure-out-which-extension-or-service-is-making-a-vs-code-helper-proces&quot;&gt;an unanswered StackOverflow question&lt;/a&gt; where the comments answered what I needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are having performance issues with Visual Studio Code, open &lt;code&gt;Developer: Open Process Explorer&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I saw that something called &lt;code&gt;electron_node tsserver.js&lt;/code&gt; was taking up over 100% of my CPU. What was this? I didn&#39;t use any TypeScript in my project.&lt;/p&gt;
&lt;p&gt;Further looking around led me to the fact that &lt;strong&gt;Visual Studio Code has extensions built-in that you never installed.&lt;/strong&gt; I did not know this! You can find these by searching &lt;code&gt;@builtin&lt;/code&gt; in your extensions.&lt;/p&gt;
&lt;p&gt;Specifically, there is an extension called &lt;code&gt;TypeScript and JavaScript Language Features&lt;/code&gt; which includes a lot of functionality like closing tags. However, it automatically runs TypeScript features even if you don&#39;t have a TypeScript project. (This begs the question, why is Visual Studio Code so deeply integrated with TypeScript that it automatically assumes you&#39;re using it? Microsoft is selling us its entire ecosystem.)&lt;/p&gt;
&lt;p&gt;Once I disabled the &lt;code&gt;TypeScript: Disable Automatic Type Acquisition&lt;/code&gt; feature, Visual Studio Code was instantly faster than I&#39;ve ever seen it before.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: To make Visual Studio Code extremely fast if you don&#39;t use TypeScript, add this line to your settings.json file:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;typescript.disableAutomaticTypeAcquisition&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>
